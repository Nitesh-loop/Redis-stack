# redis Data Types:

1. String
Redis String is the most basic data type and stores simple key-value pairs.

SET username "Nitesh Kumar"  # Store a string
GET username            # Retrieve value
APPEND username "123"   # Append to existing string
GET username            # Output: "JohnDoe123"
DEL username            # Delete key

-> Using SET with the EX or PX Option, Set the value and TTL in a single command:

# Set key "greeting" with value "hello" and TTL of 10 seconds
SET greeting "hello" EX 10

# Set key "temp_data" with value "123" and TTL of 500 milliseconds
SET temp_data "123" PX 500


-> Using EXPIRE or PEXPIRE, Set a TTL on an existing key:

# Set key "user:100" first
SET user:100 "Alice"

# Set TTL of 60 seconds on "user:100"
EXPIRE user:100 60

# Set TTL of 3000 milliseconds (3 seconds) using PEXPIRE
PEXPIRE user:100 3000



-> Using EXPIREAT or PEXPIREAT, Set expiration using a Unix timestamp (seconds/milliseconds): (Advance)

# Expire "user:100" at a specific Unix timestamp (e.g., 1717045200 = May 30, 2024)
EXPIREAT user:100 1717045200

# Using Python to calculate a future timestamp (e.g., 1 hour from now):
# python3 -c 'import time; print(int(time.time()) + 3600)'
EXPIREAT user:100 $(python3 -c 'import time; print(int(time.time()) + 3600)')


-> Check Remaining TTL, Use TTL or PTTL to see how long a key will live:

# Returns remaining TTL in seconds (-2 = key doesn't exist, -1 = no TTL)
TTL user:100

# Returns remaining TTL in milliseconds
PTTL user:100


-> Remove TTL with PERSIST, Make a key persistent (remove its TTL):

PERSIST user:100  # Removes expiration, key will no longer expire

	-1 means no expiration, -2 means expires already!


-> Overwriting TTL, Updating a key’s value resets its TTL by default. To retain/update TTL:
Example: Update value and set new TTL
SET user:100 "Bob" EX 30  # Overwrites value and sets new 30-second TTL


-> Key Notes:
TTLs are in seconds (EX, EXPIRE, EXPIREAT) or milliseconds (PX, PEXPIRE, PEXPIREAT).
Expired keys are automatically deleted by Redis.
Use TTL key to check if a key is expiring (-1 = no TTL, -2 = key not found).



2. Hash
A Hash is like a dictionary (key-value pairs inside a key). Useful for storing objects.

HSET user:id123 name "Nitesh Kumar" age 30 city "Delhi"
HGET user:id123 name       									// Retrieve a field
HGETALL user:id123         									// Retrieve all fields
HDEL user:id123 city       									// Delete a field
HEXISTS user:id123 age     									// Check if a field exists (1 if yes, 0 if no)
HINCRBY user:id123 age 2   									// Increment age by 2




Example: Create a product hash with name, price, and stock.
			Retrieve the product details and increase the stock by 5.
			
			hset product name "ice cream" price 100 stock 400
			hgetall product
			hincrby product stock 5
			

Command				Purpose											Returns
HGET				Fetches one field value from a hash.			A single string (or nil if field doesn't exist).
HMGET				Fetches multiple field values from a hash.		An array of values (or nil for non-existing fields).
		
Example:			
HSET user:101 name "Alice" age "25" city "Delhi"
			
HGET user:101 name     					# Output: "Alice"
HGET user:101 age      					# Output: "25"
HGET user:101 country  					# Output: (nil)  (because "country" field doesn't exist)


HMGET user:101 name age city   			# Output: "Alice" "25" "Delhi"
HMGET user:101 name country    			# Output: "Alice" (nil)



3. List
Lists store ordered sequences of elements, useful for tasks, logs, or messages.

LPUSH tasks "Task1" "Task2"  # Push to the left
RPUSH tasks "Task3"          # Push to the right
LRANGE tasks 0 -1            # Retrieve all elements
LPOP tasks                   # Remove first element (left)
RPOP tasks                   # Remove last element (right)
LLEN tasks                   # Get list length


Example: Create a notifications list and add five messages.
			Retrieve and remove the oldest message.
			
			LPUSH notifications "hi world" "hello world" "bye world" "tata world" "hola world"
			RPOP notifications
			LRANGE notifications 0 -1
			
-> Blocking Variants (wait for data if the list is empty)
-> Use BRPOP or BLPOP to block until an element is available:
# Wait indefinitely (0 = no timeout) for the oldest element:
BRPOP messages 0   				# For LPUSH-based lists
BLPOP messages 0   				# For RPUSH-based lists


Key Notes:
Use RPOP/BRPOP if elements are added with LPUSH (oldest is at the tail).
Use LPOP/BLPOP if elements are added with RPUSH (oldest is at the head).
If the list is empty, non-blocking commands (RPOP/LPOP) return nil.
Blocking commands (BRPOP/BLPOP) are useful for real-time queue systems.





4. Set
A Set stores unique values, meaning duplicates are automatically removed.

SADD countries "India" "USA" "UK" "India"  # India won't be added twice
SMEMBERS countries                         # Retrieve all elements
SISMEMBER countries "USA"                  # Check if "USA" exists
SREM countries "UK"                         # Remove an element
SCARD countries                             # Get set size


5. Sorted Set
A Sorted Set (ZSET) stores unique values but also assigns a score to each element, allowing sorting.

ZADD leaderboard 100 "Alice" 200 "Bob" 150 "Charlie"
ZRANGE leaderboard 0 -1 WITHSCORES   # Get all elements with scores (sorted by score)
ZREVRANGE leaderboard 0 -1 WITHSCORES # Get elements in descending order
ZINCRBY leaderboard 50 "Alice"       # Increase Alice’s score by 50
ZREM leaderboard "Charlie"           # Remove a player



6. Stream
Streams allow message queues, useful for real-time data like logs and event tracking.

XADD mystream * name "Alice" action "Login"   # Add an event
XADD mystream * name "Bob" action "Logout"    # Add another event
XRANGE mystream - +                           # Retrieve all messages
XREAD COUNT 2 STREAMS mystream 0              # Read first 2 messages


7. Bitmap
Bitmaps allow storing binary data efficiently, useful for tracking user logins or feature flags.

SETBIT user:active 0 1  # Mark user 0 as active
SETBIT user:active 1 0  # Mark user 1 as inactive
GETBIT user:active 0    # Check user 0's status
BITCOUNT user:active    # Count active users

-> User Activity Tracking
	Track daily active users (e.g., user ID 1001 logs in on day 5):

# Mark user 1001 as active on day 5
SETBIT active_users:2023-10 1001 1

# Check if user 1001 was active on day 5
GETBIT active_users:2023-10 1001  									# Returns 1

# Count total active users in October 2023
BITCOUNT active_users:2023-10

->  Feature Flags, Enable/disable features for users:
# Enable "dark_mode" for user 42
SETBIT feature:dark_mode 42 1

# Check if user 42 has dark mode enabled
GETBIT feature:dark_mode 42  										# Returns 1


-> Real-Time Analytics, Find users active on both Monday and Tuesday:

# Monday's active users
SETBIT active:Monday 1001 1
SETBIT active:Monday 1002 1

# Tuesday's active users
SETBIT active:Tuesday 1001 1

# Perform a bitwise AND to find common users
BITOP AND active:both_days active:Monday active:Tuesday

# Count users active on both days
BITCOUNT active:both_days  											# Returns 1 (user 1001)



Example:

# Create a bitmap to track online users
SETBIT online_users 1001 1  										# User 1001 is online
SETBIT online_users 1002 1  										# User 1002 is online

# Check if user 1001 is online
GETBIT online_users 1001  											# Returns 1

# Count total online users
BITCOUNT online_users  												# Returns 2

# Find the first user who is online
BITPOS online_users 1  												# Returns 1001 (the first bit set to 1)


-> Note:
-> Performance Notes

Memory Usage: 			A bitmap with offset N uses roughly (N / 8) bytes.
Example: 				Tracking 10 million users ≈ 1.19 MB.
BITOP Complexity: 		Use with caution for large datasets (time complexity is O(N)).
Sparse Bitmaps: 		If most bits are 0, consider using other structures (e.g., HyperLogLog).

-> When to Use Bitmaps
- Tracking binary states (e.g., yes/no, on/off).
- High-cardinality data with simple queries.
- Real-time analytics requiring bitwise operations.



8. Bitfield
Bitfields manipulate multiple bits in one command, useful for flags or counters.

BITFIELD user:status SET u8 0 100  									# Set first 8-bit value to 100
BITFIELD user:status GET u8 0      									# Get the value (100)


9. Geospatial Data
Stores latitude/longitude information, useful for location-based queries.

GEOADD locations 77.2090 28.6139 "Delhi" 78.9629 20.5937 "India"
GEODIST locations "Delhi" "India" km    							# Get distance between two points
GEORADIUS locations 77.2090 28.6139 500 km WITHCOORD  				# Find places within 500 km
